#+title: Emacs Desktop Environment
#+PROPERTY: header-args:emacs-lisp :tangle ./desktop.el :mkdirp yes

* Window Management
** EXWM Configuration
#+begin_src emacs-lisp

     (defun efs/run-in-background (command)
       (let ((command-parts (split-string command "[ ]+")))
         (apply #'call-process `(,(car command-parts) nil 0 nil ,@(cdr command-parts)))))

     (defun efs/exwm-init-hook ()
       ;; Make workspace 1 be the one where we land at startup
       (exwm-workspace-switch-create 1)

       ;; Open picom  by default
       (efs/start-picom)
 
       ;; Start the Polybar panel
       (efs/start-panel))

       ;; Launch apps that will be run in the background
       ;; (efs/run-in-background "nm-applet"))

         (defun efs/exwm-update-class ()
       (exwm-workspace-rename-buffer exwm-class-name))

     (defun efs/exwm-update-title ()
       (pcase exwm-class-name
         ("Firefox" (exwm-workspace-rename-buffer (format "Firefox: %s" exwm-title)))))

     (defun efs/position-window ()
       (let* ((pos (frame-position))
              (pos-x (car pos))
              (pos-y (cdr pos)))

         (exwm-floating-move (- pos-x) (- pos-y))))

     (defun efs/configure-window-by-class ()
       (interactive)
       (pcase exwm-class-name
         ("Dot" (exwm-workspace-move-window 2))
         ("Nyxt" (exwm-workspace-move-window 4))
         ("mpv" (exwm-floating-toggle-floating)
                (exwm-layout-toggle-mode-line))))

       ;;(message "Window '%s' appeared!" exwm-class-name))

     (use-package exwm
       :config
       ;; Set the default number of workspaces
       (setq exwm-workspace-number 5)

       ;; When window "class" updates, use it to set the buffer name
       (add-hook 'exwm-update-class-hook #'efs/exwm-update-class)

       ;; When window title updates, use it to set the buffer name
       (add-hook 'exwm-update-title-hook #'efs/exwm-update-title)

       ;; Configure windows as they're created
       (add-hook 'exwm-manage-finish-hook #'efs/configure-window-by-class)

       ;; When exwm starts up do some configuration
       (add-hook 'exwm-init-hook #'efs/exwm-init-hook)

       ;; Remap CapsLock to Ctrl
       (start-process-shell-command "xmodmap" nil "xmodmap ~/.config/emacs/exwm/Xmodmap")

       ;; Automatically move EXWM buffer to current workspace when selected
       (setq exwm-layout-show-all-buffers t)

       ;; Display all EXWM buffers in every workspace buffer list
       (setq exwm-workspace-show-all-buffers t)

       ;; Detach the minibuffer (show it with exwm-workspace-toggle-minibuffer)
       ;; (setq exwm-workspace-minibuffer-position 'bottom)

       ;; Activate the buffers as mouse flows
       ;;(require 'exwm-systemtray)
       ;;(setq exwm-systemtray-height 32)
       ;;(exwm-systemtray-enable)

       ;; Activate the buffers as mouse flows
       (setq exwm-workspace-warp-cursor t)

       ;; Focus follows with Mouse 
       (setq mouse-autoselect-window t
             focus-follows-mouse t)

       ;; These keys should always pass through to Emacs
       (setq exwm-input-prefix-keys
             '(?\C-x
               ?\C-u
               ?\C-h
               ?\M-x
               ?\M-`
               ?\M-&
               ?\M-:
               ?\C-\M-j  ;; Buffer list
               ?\C-\ ))  ;; Ctrl+Space

       ;; Ctrl+Q will enable the next key to be sent directly
       (define-key exwm-mode-map [?\C-q] 'exwm-input-send-next-key)

       ;; Set up global key bindings.  These always work, no matter the input state!
       ;; Keep in mind that changing this list after EXWM initializes has no effect.
       (setq exwm-input-global-keys
             `(
               ;; Reset to line-mode (C-c C-k switches to char-mode via exwm-input-release-keyboard)
               ([?\s-r] . exwm-reset)

               ;; Move between windows
               ([?\s-h] . windmove-left)
               ([?\s-l] . windmove-right)
               ([?\s-k] . windmove-up)
               ([?\s-j] . windmove-down)

               ;; Launch applications via shell command
               ([?\s-&] . (lambda (command)
                            (interactive (list (read-shell-command "$ ")))
                            (start-process-shell-command command nil command)))

               ;; Switch workspace
               ([?\s-w] . exwm-workspace-switch)
               ([?\s-`] . (lambda () (interactive) (exwm-workspace-switch-create 0)))

               ;; 's-N': Switch to certain workspace with Super (Win) plus a number key (0 - 9)
               ,@(mapcar (lambda (i)
                           `(,(kbd (format "s-%d" i)) .
                             (lambda ()
                               (interactive)
                               (exwm-workspace-switch-create ,i))))
                         (number-sequence 0 9))))

       (exwm-input-set-key (kbd "s-SPC") 'counsel-linux-app)
       (exwm-enable))

#+end_src

** Dynamic Tilling Windows with edwina
#+begin_src emacs-lisp

  (use-package edwina
    :ensure t
    :config
    (setq display-buffer-base-action '(display-buffer-below-selected))
    ;; (edwina-setup-dwm-keys)
    (edwina-mode 0))

#+end_src
* Enviromental Setup
** Launcher Script

The launcher sript is invoked by =EXWM.desktop= to start Emacs and load our desktop enviroment configuration. We also start up some other helpful applications to configure the desktop experience.

#+begin_src shell :tangle ./exwm/start-exwm.sh :shebang #!/bin/sh

  # Set the screen DPI (uncomment thif if needed!)
  # xrdb ~/.config/emacs/exwm/Xresources

  # NOTE: This is only for the live demo, not needed for your configuration!

  # spice-vdagent

  # Fire it up
  exec dbus-launch --exit-with-session emacs -mm --debug-init -l ~/.config/emacs/desktop.el

#+end_src

** Desktop Entry

#+begin_src shell :tangle ./exwm/EXWM.desktop

    [Desktop Entry]
    Name=EXWM
    Comment=Emacs Window Manager
    Exec=sh /home/sar/.config/emacs/exwm/start-exwm.sh
    TryExec=sh
    Type=Application
    X-LightDM-DesktopName=exwm
    DesktopNames=exwm

#+end_src

** Keyboard Configuration

Contents of =~/.emacs/exwm/Xmodmap=.  Make sure =xmodmap= is installed!  This swaps CapsLock with Ctrl and places CapsLock on the Ctrl on the right side of the keyboard so you can get to it if needed.

#+begin_src shell :tangle ./exwm/Xmodmap

  clear lock
  clear control
  keycode 66 = Control_L
  add control = Control_L
  add Lock = Control_R

#+end_src


* External Programs 
*** Panel with Polybar

Starting the polybar from emacs

#+begin_src emacs-lisp

   ;; Make sure the server is started (better to do this in your main Emacs config!)
  (server-start)

  (defvar efs/polybar-process nil
    "Holds the process of the running Polybar instance, if any")

  (defun efs/kill-panel ()
    (interactive)
    (when efs/polybar-process
      (ignore-errors
        (kill-process efs/polybar-process)))
    (setq efs/polybar-process nil))

  (defun efs/start-panel ()
    (interactive)
    (efs/kill-panel)
    (setq efs/polybar-process (start-process-shell-command "polybar" nil "polybar panel")))

  (defun efs/send-polybar-hook (module-name hook-index)
    (start-process-shell-command "polybar-msg" nil (format "polybar-msg hook %s %s" module-name hook-index)))

  (defun efs/send-polybar-exwm-workspace ()
    (efs/send-polybar-hook "exwm-workspace" 1))

  (defun efs/polybar-exwm-workspace ()
    (pcase exwm-workspace-current-index
      (0 "")
      (1 "")
      (2 "")
      (3 "")
      (4 "")))

  ;; Update panel indicator when workspace changes
  (add-hook 'exwm-workspace-switch-hook #'efs/send-polybar-exwm-workspace)

#+end_src

~/.config/polybar/config 
#+begin_src conf :tangle ~/.config/polybar/config

  ; Docs: https://github.com/polybar/polybar
  ;==========================================================

  [settings]
  screenchange-reload = true

  [global/wm]
  margin-top = 0
  margin-bottom = 0

  [colors]
  background = #CC292D3E 
  background-alt = #576075
  foreground = #A6Accd
  foreground-alt = #555
  primary = #ffb52a
  secondary = #e60053
  alert = #bd2c40
  underline-1 = #c792ea

  [bar/panel]
  width = 100%
  height = 25
  offset-x = 0
  offset-y = 0
  fixed-center = true
  enable-ipc = true

  background = ${colors.background}
  foreground = ${colors.foreground}

  line-size = 2
  line-color = #f00

  border-size = 0
  border-color = #00000000

  padding-top = 5
  padding-left = 1
  padding-right = 1

  module-margin = 1

  font-0 = "Cantarell:size=15:weight=bold;2"
  font-1 = "Font Awesome:size=12;2"
  font-2 = "Material Icons:size=17;3"
  font-3 = "Fira Mono:size=13;-3"

  modules-right = cpu temperature date

  tray-position = right
  tray-padding = 2
  tray-maxsize = 28

  cursor-click = pointer
  cursor-scroll = ns-resize
  modules-left = exwm-workspace

  [module/exwm-workspace]
  type = custom/ipc
  hook-0 = emacsclient -e "(efs/polybar-exwm-workspace)" | sed -e 's/^"//' -e 's/"$//'
  initial = 1
  format-underline = ${colors.underline-1}
  format-padding = 1

  [module/cpu]
  type = internal/cpu
  interval = 2
  format = <label> <ramp-coreload>
  format-underline = ${colors.underline-1}
  click-left = emacsclient -e "(proced)"
  label = %percentage:2%%
  ramp-coreload-spacing = 0
  ramp-coreload-0 = ▁
  ramp-coreload-0-foreground = ${colors.foreground-alt}
  ramp-coreload-1 = ▂
  ramp-coreload-2 = ▃
  ramp-coreload-3 = ▄
  ramp-coreload-4 = ▅
  ramp-coreload-5 = ▆
  ramp-coreload-6 = ▇

  [module/date]
  type = internal/date
  interval = 5

  date = "%a %b %e"
  date-alt = "%A %B %d %Y"

  time = %l:%M %p
  time-alt = %H:%M:%S

  format-prefix-foreground = ${colors.foreground-alt}
  format-underline = ${colors.underline-1}

  label = %date% %time%

  [module/battery]
  type = internal/battery
  battery = BAT0
  adapter = ADP1
  full-at = 98
  time-format = %-l:%M

  label-charging = %percentage%% / %time%
  format-charging = <animation-charging> <label-charging>
  format-charging-underline = ${colors.underline-1}

  label-discharging = %percentage%% / %time%
  format-discharging = <ramp-capacity> <label-discharging>
  format-discharging-underline = ${self.format-charging-underline}

  format-full = <ramp-capacity> <label-full>
  format-full-underline = ${self.format-charging-underline}

  ramp-capacity-0 = 
  ramp-capacity-1 = 
  ramp-capacity-2 = 
  ramp-capacity-3 = 
  ramp-capacity-4 = 

  animation-charging-0 = 
  animation-charging-1 = 
  animation-charging-2 = 
  animation-charging-3 = 
  animation-charging-4 = 
  animation-charging-framerate = 750

  [module/temperature]
  type = internal/temperature
  thermal-zone = 0
  warn-temperature = 60

  format = <label>
  format-underline = ${colors.underline-1}
  format-warn = <label-warn>
  format-warn-underline = ${self.format-underline}

  label = %temperature-c%
  label-warn = %temperature-c%!
  label-warn-foreground = ${colors.secondary}

#+end_src

** Transparencey with picom
#+begin_src emacs-lisp

  (defvar efs/picom-process nil
    "Holds the process of the running Polybar instance, if any")

  (defun efs/kill-picom ()
    (interactive)
    (when efs/picom-process
      (ignore-errors
        (kill-process efs/picom-process)))
    (setq efs/picom-process nil))

  (defun efs/start-picom ()
    (interactive)
    (efs/kill-picom)
    (setq efs/picom-process (start-process-shell-command "picom" nil "picom")))

#+end_src

